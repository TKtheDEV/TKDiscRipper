import subprocess
import threading
import time
import uuid
from collections import deque
from typing import Dict, Optional
from .utils.config_manager import get_config
from .cd import rip_cd
from .dvd import DvdRipper
from .bluray import BlurayRipper
from .otherdisc import rip_other

class JobTracker:
    """Tracks disc ripping jobs with real-time progress, logs, and API control."""

    def __init__(self):
        self.jobs: Dict[str, Dict] = {}
        self.lock = threading.Lock()

    def start_job(self, drive_path: str, disc_type: str) -> str:
        """Creates a new job and starts the ripping process."""
        job_id = str(uuid.uuid4())

        config = get_config()
        output_folder = config.get("paths", "output_dir", fallback="output")

        with self.lock:
            self.jobs[job_id] = {
                "job_id": job_id,
                "disc_type": disc_type,
                "drive": drive_path,
                "output_folder": output_folder,
                "start_time": time.time(),
                "elapsed_time": 0,
                "progress": 0,
                "status": "running",
                "stdout_log": deque(maxlen=15),  # ✅ Stores last 15 log lines
                "process": None,  # ✅ Stores subprocess reference
            }

        threading.Thread(target=self._run_job, args=(job_id, drive_path, disc_type)).start()
        return job_id

    def _run_job(self, job_id: str, drive_path: str, disc_type: str):
        """Runs the ripping job and captures logs."""
        job = self.jobs.get(job_id)
        if not job:
            return

        # Normalize disc type for lookup
        disc_type_map = {"dvd": "dvd_video", "bluray": "blu_ray_video", "cd": "audio_cd"}
        normalized_type = disc_type_map.get(disc_type, disc_type)

        # Select the correct ripper
        if normalized_type == "dvd_video":
            ripper_command = ["python", "-m", "app.backend.dvd", drive_path, job_id]
        elif normalized_type == "blu_ray_video":
            ripper_command = ["python", "-m", "app.backend.bluray", drive_path, job_id]
        elif normalized_type == "audio_cd":
            ripper_command = ["python", "-m", "app.backend.cd", drive_path, job_id]
        else:
            ripper_command = ["python", "-m", "app.backend.otherdisc", drive_path, job_id]

        try:
            # ✅ Start the subprocess
            process = subprocess.Popen(
                ripper_command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, bufsize=1
            )
            job["process"] = process

            # ✅ Capture logs in real time
            for line in iter(process.stdout.readline, ""):
                with self.lock:
                    job["stdout_log"].append(line.strip())
                    job["elapsed_time"] = time.time() - job["start_time"]

            process.wait()  # Wait for process completion

            # ✅ Check exit status
            if process.returncode == 0:
                self._update_job(job_id, "✅ Ripping completed successfully.", completed=True)
            else:
                self._update_job(job_id, f"❌ Ripping failed (Exit Code: {process.returncode})", failed=True)

        except Exception as e:
            self._update_job(job_id, f"❌ Error: {e}", failed=True)

    def _update_job(self, job_id: str, log_message: str, completed: bool = False, failed: bool = False):
        """Updates job logs and status."""
        with self.lock:
            job = self.jobs.get(job_id)
            if not job:
                return

            job["stdout_log"].append(log_message)
            job["elapsed_time"] = time.time() - job["start_time"]

            if completed:
                job["status"] = "completed"
            elif failed:
                job["status"] = "failed"

    def get_job_status(self, job_id: str) -> Optional[Dict]:
        """Returns the status of a given job."""
        with self.lock:
            job = self.jobs.get(job_id)
            if job:
                job["elapsed_time"] = time.time() - job["start_time"]
                
                # ✅ Return a copy without non-serializable objects
                return {key: value for key, value in job.items() if key not in ["process", "lock"]}
        return None

    def cancel_job(self, job_id: str) -> bool:
        """Cancels a running job."""
        with self.lock:
            job = self.jobs.get(job_id)
            if job and job["status"] == "running":
                # Terminate the process if it's running
                process = job.get("process")
                if process and process.poll() is None:  # Process is still running
                    process.terminate()
                    process.wait()
                    job["status"] = "canceled"
                    self._update_job(job_id, "❌ Job canceled.")
                    return True
        return False

    def get_job_logs(self, job_id: str) -> Optional[deque]:
        """Returns the last 50 lines of stdout for the job."""
        with self.lock:
            job = self.jobs.get(job_id)
            if job:
                return list(job["stdout_log"])
            return None
